#!/usr/bin/env python3
"""
Script t·∫°o database PostgreSQL cho h·ªá th·ªëng ch·∫•m c√¥ng DMI
"""

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import os
from dotenv import load_dotenv

load_dotenv()

def create_database():
    """T·∫°o database PostgreSQL"""
    
    # Th√¥ng tin k·∫øt n·ªëi PostgreSQL
    DB_USER = os.environ.get('DB_USER') or 'postgres'
    DB_PASSWORD = os.environ.get('DB_PASSWORD') or 'password'
    DB_HOST = os.environ.get('DB_HOST') or 'localhost'
    DB_PORT = os.environ.get('DB_PORT') or '5432'
    DB_NAME = os.environ.get('DB_NAME') or 'attendance_db'
    
    try:
        # K·∫øt n·ªëi ƒë·∫øn PostgreSQL server (kh√¥ng ch·ªâ ƒë·ªãnh database c·ª• th·ªÉ)
        conn = psycopg2.connect(
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT,
            database='postgres'  # K·∫øt n·ªëi ƒë·∫øn database m·∫∑c ƒë·ªãnh
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem database ƒë√£ t·ªìn t·∫°i ch∆∞a
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (DB_NAME,))
        exists = cursor.fetchone()
        
        if not exists:
            # T·∫°o database m·ªõi
            cursor.execute(f'CREATE DATABASE {DB_NAME}')
            print(f"‚úÖ ƒê√£ t·∫°o database '{DB_NAME}' th√†nh c√¥ng!")
        else:
            print(f"‚ÑπÔ∏è  Database '{DB_NAME}' ƒë√£ t·ªìn t·∫°i.")
        
        cursor.close()
        conn.close()
        
        print("üéâ Database ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng!")
        print(f"üìù Th√¥ng tin k·∫øt n·ªëi:")
        print(f"   - Host: {DB_HOST}")
        print(f"   - Port: {DB_PORT}")
        print(f"   - Database: {DB_NAME}")
        print(f"   - User: {DB_USER}")
        
    except psycopg2.Error as e:
        print(f"‚ùå L·ªói khi t·∫°o database: {e}")
        print("\nüîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
        print("1. ƒê·∫£m b·∫£o PostgreSQL ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("2. Ki·ªÉm tra th√¥ng tin k·∫øt n·ªëi trong file .env")
        print("3. ƒê·∫£m b·∫£o user c√≥ quy·ªÅn t·∫°o database")
        print("4. Ki·ªÉm tra PostgreSQL service ƒëang ch·∫°y")
        
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

def drop_database():
    """X√≥a database PostgreSQL"""
    
    DB_USER = os.environ.get('DB_USER') or 'postgres'
    DB_PASSWORD = os.environ.get('DB_PASSWORD') or 'password'
    DB_HOST = os.environ.get('DB_HOST') or 'localhost'
    DB_PORT = os.environ.get('DB_PORT') or '5432'
    DB_NAME = os.environ.get('DB_NAME') or 'attendance_db'
    
    try:
        # K·∫øt n·ªëi ƒë·∫øn PostgreSQL server
        conn = psycopg2.connect(
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT,
            database='postgres'
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem database c√≥ t·ªìn t·∫°i kh√¥ng
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (DB_NAME,))
        exists = cursor.fetchone()
        
        if exists:
            # X√≥a database
            cursor.execute(f'DROP DATABASE {DB_NAME}')
            print(f"‚úÖ ƒê√£ x√≥a database '{DB_NAME}' th√†nh c√¥ng!")
        else:
            print(f"‚ÑπÔ∏è  Database '{DB_NAME}' kh√¥ng t·ªìn t·∫°i.")
        
        cursor.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"‚ùå L·ªói khi x√≥a database: {e}")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

if __name__ == '__main__':
    print("üóÑÔ∏è  PostgreSQL Database Manager")
    print("=" * 40)
    
    while True:
        print("\nCh·ªçn h√†nh ƒë·ªông:")
        print("1. T·∫°o database")
        print("2. X√≥a database")
        print("3. Tho√°t")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
        
        if choice == '1':
            create_database()
        elif choice == '2':
            confirm = input("‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a database? (y/N): ").strip().lower()
            if confirm == 'y':
                drop_database()
            else:
                print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a database.")
        elif choice == '3':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i!") 